package br.ufes.dwws.ufespay.core.application;

import java.util.Set;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.transaction.Transactional;

import br.ufes.dwws.ufespay.core.domain.Comment;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.dwws.ufespay.core.persistence.CommentDAO;
import br.ufes.dwws.ufespay.core.persistence.TransactionDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class CommentServiceBean implements CommentService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private CommentDAO commentDAO;
	
	@EJB
	private TransactionDAO transactionDAO;

	@EJB
	private TransactionService transactionService;

	@EJB
	private UserService userService;

	public void createComment(Comment newComment) {
		this.commentDAO.save(newComment);
	}

	@Transactional
	public Comment createComment(Transaction transac, User author, String message) {
		Comment newComment = new Comment();
		Transaction transComm = transactionService.getTransactionById(transac.getId());
		newComment.setText(message);
		newComment.setAuthor(this.userService.getUserById(author.getId()));
		newComment.setTransaction(transComm);
		transComm.getComments().add(newComment);

		this.commentDAO.save(newComment);
		transactionService.updateTranscation(transComm);

		return newComment;
	}

	public void getCommentById(Long id) {
		this.commentDAO.retrieveById(id);
	}

	private Comment findComment(Long idComment, Set<Comment> comments) {
		Comment result = null;
		for (Comment aux : comments) {
			if (aux.getId().equals(idComment)) {
				result = aux;
				break;
			}
		}
		return result;
	}

	@Override
	@Transactional
	public boolean deleteComment(Long idTransac, Long idComment, Long idUser) {
		User possibleAuthor = this.userService.getUserById(idUser);
		Transaction retrievedTransac = this.transactionService.getTransactionById(idTransac);
		
		Comment commenToDelete = findComment(idComment, retrievedTransac.getComments());
		if((possibleAuthor!=null)&&(commenToDelete!=null)) {
			
			if (commenToDelete.getAuthor().getEmail().equalsIgnoreCase(possibleAuthor.getEmail())) {
				retrievedTransac.getComments().contains(commenToDelete);
				retrievedTransac.getComments().remove(commenToDelete);
				this.transactionDAO.merge(retrievedTransac);
				this.commentDAO.delete(idComment);
				return true;
			}else {
				return false;
			}
		}else {
			return false;
		}
			
	}

}