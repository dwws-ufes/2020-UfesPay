package br.ufes.dwws.ufespay.core.application;

import java.math.BigDecimal;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.transaction.Transactional;

import org.apache.jena.ext.com.google.common.base.Strings;

import br.ufes.dwws.ufespay.core.domain.Comment;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.dwws.ufespay.core.persistence.TransactionDAO;
import br.ufes.dwws.ufespay.core.persistence.UserDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class TransactionServiceBean implements TransactionService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private TransactionDAO transactionDAO;

	@EJB
	private UserDAO userDAO;

	public List<Transaction> readAllTranscations() {
		return this.transactionDAO.retrieveAll();
	}

	public List<Comment> retrieveAllComments(Long transacId) {
		return this.transactionDAO.retrieveAllComments(transacId);
	}

	public Transaction getTransactionById(Long transacId) {
		return this.transactionDAO.retrieveById(transacId);
	}

	@Override
	@Transactional
	public Transaction createTranscation(User emitter, User receiver, BigDecimal value, String message) {
		User emitterUser = this.userDAO.retrieveById(emitter.getId());
		User receiverUser = this.userDAO.retrieveById(receiver.getId());

		BigDecimal emitterBalance = emitterUser.getWallet().getBalance();
		BigDecimal receiverBalance = receiverUser.getWallet().getBalance();

		if (emitterBalance.compareTo(value) < 0) {
			return null;
		} else {
			Transaction newTransaction = new Transaction();
			newTransaction.setValue(value);
			newTransaction.setEmitter(emitterUser);
			newTransaction.setReceiver(receiverUser);
			newTransaction.setWallet(emitterUser.getWallet());
			newTransaction.setMessage(message);

			emitterBalance = emitterBalance.subtract(value);
			emitterUser.getWallet().setBalance(emitterBalance);
			emitterUser.getWallet().getTransactions().add(newTransaction);

			receiverBalance = receiverBalance.add(value);
			receiverUser.getWallet().setBalance(receiverBalance);
			receiverUser.getWallet().getTransactions().add(newTransaction);

			this.transactionDAO.save(newTransaction);

			return newTransaction;
		}
	}

	public Transaction likeTransaction(User user, Transaction transac) {
		User retrievedUser = this.userDAO.retrieveById(user.getId());
		Transaction retrievedTransac = this.transactionDAO.retrieveById(transac.getId());
		if ((retrievedUser != null) && (retrievedTransac != null)) {
			retrievedTransac.getLikes().add(retrievedUser);
			this.transactionDAO.save(retrievedTransac);
			return retrievedTransac;
		} else
			return retrievedTransac;
	}

	public Transaction disLikeTransaction(User user, Transaction transac) {
		User retrievedUser = this.userDAO.retrieveById(user.getId());
		Transaction retrievedTransac = this.transactionDAO.retrieveById(transac.getId());
		if ((retrievedUser != null) && (retrievedTransac != null)) {
			retrievedTransac.getLikes().remove(retrievedUser);
			this.transactionDAO.save(retrievedTransac);
			return retrievedTransac;
		} else
			return retrievedTransac;
	}

	public void createTranscation(Transaction transac) {
		transactionDAO.save(transac);
	}

	@Override
	public Transaction updateTranscation(Transaction transac) {
		return transactionDAO.update(transac);
	}

	public List<Transaction> retrieveAllTransactions(String userEmail, boolean asEmitter) {
		if (!Strings.isNullOrEmpty(userEmail))
			return transactionDAO.retrieveAllTransactions(userEmail, asEmitter);
		else
			return null;
	}

}