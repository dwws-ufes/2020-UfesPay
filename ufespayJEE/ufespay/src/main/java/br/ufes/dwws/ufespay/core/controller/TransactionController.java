package br.ufes.dwws.ufespay.core.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.inject.Model;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.omnifaces.util.Faces;
import org.primefaces.PrimeFaces;

import br.ufes.dwws.ufespay.core.application.TransactionService;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;

/** TODO: generated by FrameWeb. Should be documented. */
@Model
public class TransactionController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private TransactionService transactionService;

	private Transaction selectedTransaction = new Transaction();

	private User emitter;

	private User receiver;

	private BigDecimal value = BigDecimal.ZERO;

	private String message = "";

	private List<Transaction> transactions;
	
	
	@PostConstruct 
	public void retriedAllTransactions() {
			this.transactions = transactionService.readAllTranscations();
			this.value = BigDecimal.ZERO;
	}

	public Transaction getSelectedTransaction() {
		return selectedTransaction;
	}

	public void setSelectedTransaction(Transaction selectedTransaction) {
		this.selectedTransaction = selectedTransaction;
	}

	public User getEmitter() {
		return emitter;
	}

	public void setEmitter(User emitter) {
		this.emitter = emitter;
	}

	public User getReceiver() {
		return receiver;
	}

	public void setReceiver(User receiver) {
		this.receiver = receiver;
	}

	public BigDecimal getValue() {
		return value;
	}

	public void setValue(BigDecimal value) {
		this.value = value;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public List<Transaction> getTransactions() {
		return transactions;
	}

	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}
	
	public void openNewTransaction() {
		this.selectedTransaction = new Transaction();
		//get loged user from context
		//this.selectedTransaction.setEmitter();
	}
	
	public void updateTransaction() throws IOException {
		//this.transactionService.updateTranscation(selectedTransaction);
		//PrimeFaces.current().executeScript("PF('manageTransactionDialog').hide()");
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage("updateTransaction"));
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	public void createTransaction() throws IOException {

		
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage("createTransaction"));
		Faces.getExternalContext().getFlash().setKeepMessages(true);
		Faces.redirect("/ufespay/index.xhtml");
		/* BigDecimal emitterBalance = emitter.getWallet().getBalance();
		BigDecimal receiverBalance = receiver.getWallet().getBalance();

		if (emitterBalance.compareTo(value) < 0) {
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,
					"Emitter does not have enough balance", "insufficient wallet balance"));
		} else {
			Transaction newTransac = transactionService.createTranscation(emitter, receiver, value, message);
			if (newTransac == null) {
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_ERROR, "could not create transaction", "unknown error"));
			} else {
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage("Transaction created successfully"));
			}
		}

		Faces.getExternalContext().getFlash().setKeepMessages(true);
		Faces.redirect("/ufespay/index.xhtml"); */
	}

}