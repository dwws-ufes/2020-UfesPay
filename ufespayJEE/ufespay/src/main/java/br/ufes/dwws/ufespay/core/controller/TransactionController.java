package br.ufes.dwws.ufespay.core.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.omnifaces.util.Faces;

import br.ufes.dwws.ufespay.core.application.TransactionService;
import br.ufes.dwws.ufespay.core.application.UserService;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.util.Utils;
import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;

/** TODO: generated by FrameWeb. Should be documented. */
//@Model
@SessionScoped
@Named
public class TransactionController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private TransactionService transactionService;
	
	@EJB
	private UserService userService;
	
	@Inject
	private LoginUserController loginUserController;

	private Transaction selectedTransaction = new Transaction();
	
	private List<Transaction> transactions;
	
	
	@PostConstruct 
	public void retriedAllTransactions() {
			this.transactions = transactionService.readAllTranscations();
	}
	
	public void openNewTransaction() throws IOException{
		this.selectedTransaction = new Transaction();
		this.selectedTransaction.setMessage("");
		this.selectedTransaction.setValue(BigDecimal.valueOf(0,0));
		this.selectedTransaction.setEmitter(loginUserController.getCurrentUser());
		Utils.redirectsToUrl("/ufespay/core/transactionCreate/index.xhtml");	
	}
	
	public void prepareUpdateTransac() throws IOException {
		//this.transactionService.updateTranscation(selectedTransaction);
		//PrimeFaces.current().executeScript("PF('manageTransactionDialog').hide()");
		Utils.redirectsToUrl("/ufespay/core/transactionManage/index.xhtml");
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	public void createTransaction() throws IOException {
		//add new newTransaction
		
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage("createTransaction"));
		Faces.getExternalContext().getFlash().setKeepMessages(true);
		Faces.redirect("/ufespay/index.xhtml");
		/* BigDecimal emitterBalance = emitter.getWallet().getBalance();
		BigDecimal receiverBalance = receiver.getWallet().getBalance();

		if (emitterBalance.compareTo(value) < 0) {
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,
					"Emitter does not have enough balance", "insufficient wallet balance"));
		} else {
			Transaction newTransac = transactionService.createTranscation(emitter, receiver, value, message);
			if (newTransac == null) {
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_ERROR, "could not create transaction", "unknown error"));
			} else {
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage("Transaction created successfully"));
			}
		}

		Faces.getExternalContext().getFlash().setKeepMessages(true);
		Faces.redirect("/ufespay/index.xhtml"); */
	}
	
	public void updateTransaction() throws IOException {
		Utils.showMessageRedirec("Teste","Teste", "/ufespay/core/transactionManage/index.xhtml",FacesMessage.SEVERITY_INFO );
	}
	
	public void redirectsHome() throws IOException {
		Utils.redirectsToUrl("/ufespay/core/index.xhtml");
	}

	public Transaction getSelectedTransaction() {
		return selectedTransaction;
	}

	public void setSelectedTransaction(Transaction selectedTransaction) {
		this.selectedTransaction = selectedTransaction;
	}

	public List<Transaction> getTransactions() {
		return transactions;
	}

	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}

}