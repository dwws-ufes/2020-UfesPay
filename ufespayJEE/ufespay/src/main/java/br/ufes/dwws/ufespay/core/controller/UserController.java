package br.ufes.dwws.ufespay.core.controller;

import java.io.IOException;
import java.math.BigDecimal;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.inject.Model;
import javax.faces.application.FacesMessage;
import javax.inject.Inject;

import org.omnifaces.util.Faces;

import br.ufes.dwws.ufespay.core.application.UserService;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.dwws.ufespay.core.util.Utils;
import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;

/** TODO: generated by FrameWeb. Should be documented. */
@Model
public class UserController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private UserService userService;

	@Inject
	private LoginUserController loginUserController;

	/** TODO: generated by FrameWeb. Should be documented. */
	private User user;

	private BigDecimal currentAmountBalance;
	
	private BigDecimal addNewAmountBalance;

	@PostConstruct
	private void setupCurrentUser() {
		this.user = userService.getByEmail(loginUserController.getCurrentUser().getEmail());
		this.addNewAmountBalance = BigDecimal.valueOf(0,0);
		this.currentAmountBalance = this.user.getWallet().getBalance();
	}

	public void addWalletAmount() throws IOException {

		if (addNewAmountBalance.compareTo(BigDecimal.valueOf(0.0)) >= 0) {
			// amount > 0
			this.user = userService.getByEmail(user.getEmail());
			this.currentAmountBalance = this.user.getWallet().getBalance();
			this.currentAmountBalance = this.currentAmountBalance.add(this.addNewAmountBalance);
			user.getWallet().setBalance(this.currentAmountBalance);
			userService.updateUser(this.user);
			Utils.showMessageRedirec("Amount added","Amount added successfully", "/ufespay/core/index.xhtml",FacesMessage.SEVERITY_INFO );
		} else {
			// amount <= 0
			Faces.getExternalContext().getFlash().setKeepMessages(true);
			Utils.showMessageRedirec("Invalid Value","amount must be greater than zero", "/ufespay/core/index.xhtml",FacesMessage.SEVERITY_ERROR );
		}
	}

	
	public BigDecimal getCurrentAmountBalance() {
		return currentAmountBalance;
	}

	public void setCurrentAmountBalance(BigDecimal currentAmountBalance) {
		this.currentAmountBalance = currentAmountBalance;
	}

	public BigDecimal getAddNewAmountBalance() {
		return addNewAmountBalance;
	}

	public void setAddNewAmountBalance(BigDecimal addNewAmountBalance) {
		this.addNewAmountBalance = addNewAmountBalance;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	
}