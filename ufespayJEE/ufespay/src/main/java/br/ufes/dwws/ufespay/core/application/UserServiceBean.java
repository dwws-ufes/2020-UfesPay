package br.ufes.dwws.ufespay.core.application;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.transaction.Transactional;

import br.ufes.dwws.ufespay.core.domain.Comment;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.dwws.ufespay.core.domain.Wallet;
import br.ufes.dwws.ufespay.core.persistence.UserDAO;
import br.ufes.dwws.ufespay.core.persistence.WalletDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class UserServiceBean implements UserService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private UserDAO userDAO;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private WalletDAO walletDAO;

	@EJB
	private TransactionService transactionService;

	@EJB
	private CommentService commentService;

	public void createUser() {
		
	}
	
	@Override
	public User getByEmail(String email) {
		return this.userDAO.getByEmail(email);
	}
	

	// @Transactional
	public void updateUser(User user) {
		this.userDAO.update(user);
	}

	
	
	private void populateDataBase() {
		List<User> users = new ArrayList<User>();
		User newUserA = this.createNewUser("AAAAA", "aaa@gmail.com", "123456", BigDecimal.valueOf(2000, 00));
		users.add(newUserA);

		User newUserB = this.createNewUser("BBBBBB", "bbb@gmail.com", "123456", BigDecimal.valueOf(3000, 00));
		users.add(newUserB);

		User newUserC = this.createNewUser("CCCCCCC", "cccc@gmail.com", "123456", BigDecimal.valueOf(4000, 00));
		users.add(newUserC);

		Transaction transacAB = this.createTransaction(newUserA, newUserB, BigDecimal.valueOf(100, 00), "A para B");
		if (transacAB != null) {
			for(User aux  : users){
				this.addLike(transacAB, aux);
			}

			for (int i = 0; i < 2; i++) {
				createComment(transacAB,newUserC,"Comment C [" + i + "]");
			}
		}

		Transaction transacAC = this.createTransaction(newUserA, newUserC, BigDecimal.valueOf(50, 00), "A para C");
		if (transacAC != null) {
			for(User aux  : users){
				this.addLike(transacAC, aux);
			}

			for (int i = 0; i < 2; i++) {
				createComment(transacAC,newUserB,"Comment B [" + i + "]");
			}
		}

		Transaction transacBC = this.createTransaction(newUserB, newUserC, BigDecimal.valueOf(80, 00), "B para C");
		if (transacBC != null) {
			for(User aux  : users){
				this.addLike(transacBC, aux);
			}
			for (int i = 0; i < 2; i++) {
				createComment(transacBC,newUserA,"Comment A [" + i + "]");
			}

			for (int i = 0; i < 2; i++) {
				createComment(transacBC,newUserB,"Comment B [" + i + "]");
			}
			transactionService.updateTranscation(transacBC);

			for (int i = 0; i < 2; i++) {
				createComment(transacBC,newUserC,"Comment C [" + i + "]");
			}
		}		
	}
	
	@Transactional
	private Comment createComment(Transaction transac, User author, String message) {
		Comment newComment = new Comment();
		newComment.setText(message);
		newComment.setAuthor(author);
		newComment.setTransaction(transac);
		transac.getComments().add(newComment);
		
		commentService.createComment(newComment);
		transactionService.updateTranscation(transac);
		
		return newComment;
	}
	
	@Transactional
	private void addLike(Transaction transac,User user) {
		transac.getLikes().add(user);
		//user.getLikedTransactions().add(transac);
		transactionService.updateTranscation(transac);
		//userDAO.save(user);
	}

	@Transactional
	private User createNewUser(String name, String email, String password, BigDecimal initialBalance) {
		User newUser = new User();
		Wallet newUserWallet = new Wallet();

		newUser.setName(name);
		newUser.setEmail(email);
		newUser.setPassword(password);
		newUser.setWallet(newUserWallet);

		newUserWallet.setBalance(initialBalance);
		newUserWallet.setOwner(newUser);

		walletDAO.save(newUser.getWallet());
		userDAO.save(newUser);

		return newUser;

	}

	@Transactional
	private Transaction createTransaction(User emitter, User receiver, BigDecimal value, String message) {
		BigDecimal emitterBalance = emitter.getWallet().getBalance();
		BigDecimal receiverBalance = receiver.getWallet().getBalance();

		if (emitterBalance.compareTo(value) < 0) {
			return null;
		} else {
			Transaction newTransaction = new Transaction();
			newTransaction.setValue(value);
			newTransaction.setEmitter(emitter);
			newTransaction.setReceiver(receiver);
			newTransaction.setWallet(emitter.getWallet());
			newTransaction.setMessage(message);

			emitterBalance = emitterBalance.subtract(value);
			emitter.getWallet().setBalance(emitterBalance);
			emitter.getWallet().getTransactions().add(newTransaction);

			receiverBalance = receiverBalance.add(value);
			receiver.getWallet().setBalance(receiverBalance);
			receiver.getWallet().getTransactions().add(newTransaction);

			this.walletDAO.save(emitter.getWallet());
			this.walletDAO.save(receiver.getWallet());
			transactionService.createTranscation(newTransaction);

			return newTransaction;
		}

	}

}