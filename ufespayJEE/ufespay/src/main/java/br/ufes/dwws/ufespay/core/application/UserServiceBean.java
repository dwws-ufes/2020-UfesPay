package br.ufes.dwws.ufespay.core.application;

import java.math.BigDecimal;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.transaction.Transactional;

import br.ufes.dwws.ufespay.core.domain.Comment;
import br.ufes.dwws.ufespay.core.domain.Transaction;
import br.ufes.dwws.ufespay.core.domain.User;
import br.ufes.dwws.ufespay.core.domain.Wallet;
import br.ufes.dwws.ufespay.core.persistence.UserDAO;
import br.ufes.dwws.ufespay.core.persistence.WalletDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class UserServiceBean implements UserService {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private UserDAO userDAO;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private WalletDAO walletDAO;
	
	@EJB
	private TransactionService transactionService;
	
	@EJB
	private CommentService commentService;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	
	@Transactional
	public void createUser() {
		
		User newUserA = this.createNewUser("AAAAA", "aaa@gmail.com", "123456", BigDecimal.valueOf(2000,00)) ;
		walletDAO.save(newUserA.getWallet());
		userDAO.save(newUserA);
		
		User newUserB =  this.createNewUser("BBBBBB","bbb@gmail.com", "123456", BigDecimal.valueOf(3000,00)) ;
		walletDAO.save(newUserB.getWallet());
		userDAO.save(newUserB);
		
		User newUserC = this.createNewUser("CCCCCCC","cccc@gmail.com", "123456", BigDecimal.valueOf(4000,00)) ;
		walletDAO.save(newUserC.getWallet());
		userDAO.save(newUserC);
		
		Transaction  transacAB = this.createTransaction(newUserA, newUserB,BigDecimal.valueOf(100,00),"A para B");
		if (transacAB !=null) {
			this.walletDAO.save(newUserA.getWallet());
			this.walletDAO.save(newUserB.getWallet());
			transactionService.createTranscation(transacAB);
			transacAB.getLikes().add(newUserA);
			transacAB.getLikes().add(newUserB);
			transacAB.getLikes().add(newUserC);
			for (int i = 0; i < 2; i++ ) {
				Comment newComment = new Comment();
				newComment.setText("Comment C [" + i + "]");
				newComment.setAuthor(newUserC);
				newComment.setTransaction(transacAB);
				commentService.createComment(newComment);
				transacAB.getComments().add(newComment);
			}
			transactionService.updateTranscation(transacAB);
		}
		
		Transaction transacAC = this.createTransaction(newUserA, newUserC,BigDecimal.valueOf(100,00), "A para C");
		if (transacAC !=null) {
			this.walletDAO.save(newUserA.getWallet());
			this.walletDAO.save(newUserC.getWallet());
			transactionService.createTranscation(transacAC);
			transacAC.getLikes().add(newUserA);
			transacAC.getLikes().add(newUserB);
			transacAC.getLikes().add(newUserC);
			for (int i = 0; i < 2; i++ ) {
				Comment newComment = new Comment();
				newComment.setText("Comment B [" + i + "]");
				newComment.setAuthor(newUserB);
				newComment.setTransaction(transacAC);
				commentService.createComment(newComment);
				transacAC.getComments().add(newComment);
			}
			transactionService.updateTranscation(transacAC);
			
		}

		Transaction transacBC = this.createTransaction(newUserB, newUserC,BigDecimal.valueOf(100,00), "B para C");
		if (transacBC !=null) {
			this.walletDAO.save(newUserB.getWallet());
			this.walletDAO.save(newUserC.getWallet());
			transactionService.createTranscation(transacBC);
			transacBC.getLikes().add(newUserA);
			transacBC.getLikes().add(newUserB);
			transacBC.getLikes().add(newUserC);
			for (int i = 0; i < 2; i++ ) {
				Comment newComment = new Comment();
				newComment.setText("Comment A [" + i + "]");
				newComment.setAuthor(newUserA);
				newComment.setTransaction(transacBC);
				commentService.createComment(newComment);
				transacBC.getComments().add(newComment);
			}
			transactionService.updateTranscation(transacBC);
			
			for (int i = 0; i < 2; i++ ) {
				Comment newComment = new Comment();
				newComment.setText("Comment B [" + i + "]");
				newComment.setAuthor(newUserB);
				newComment.setTransaction(transacBC);
				commentService.createComment(newComment);
				transacBC.getComments().add(newComment);
			}
			transactionService.updateTranscation(transacBC);
			
			for (int i = 0; i < 2; i++ ) {
				Comment newComment = new Comment();
				newComment.setText("Comment C [" + i + "]");
				newComment.setAuthor(newUserC);
				newComment.setTransaction(transacBC);
				commentService.createComment(newComment);
				transacBC.getComments().add(newComment);
			}
			transactionService.updateTranscation(transacBC);
			
		}
	}

	private User createNewUser(String name, String email, String password,BigDecimal initialBalance) {
		User newUser = new User();
		Wallet newUserWallet = new Wallet();
		
		newUser.setName(name);
		newUser.setEmail(email);
		newUser.setPassword(password);
		newUser.setWallet(newUserWallet);
		
		newUserWallet.setBalance(initialBalance);
		newUserWallet.setOwner(newUser);
		
		return newUser;
		
	}
	private Transaction createTransaction (User emitter, User receiver, BigDecimal value, String message ) {
		BigDecimal emitterBalance = emitter.getWallet().getBalance();
		BigDecimal receiverBalance = receiver.getWallet().getBalance();
		
		if (emitterBalance.compareTo(value) < 0) {
			return null;
		}else {
			Transaction newTransaction  = new Transaction();
			newTransaction.setEmitter(emitter);
			newTransaction.setReceiver(receiver);	
			newTransaction.setWallet(emitter.getWallet());
			newTransaction.setMessage(message);
			
			emitterBalance = emitterBalance.subtract(value);
			emitter.getWallet().setBalance(emitterBalance);
			emitter.getWallet().getTransactions().add(newTransaction);
			
			receiverBalance = receiverBalance.add(value);
			receiver.getWallet().setBalance(receiverBalance);
			receiver.getWallet().getTransactions().add(newTransaction);
			
			return newTransaction;
		}
		
	}

}